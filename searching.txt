MISSING ELEMENT
=======================================================
MY APPROACH------------

class Solution {
    int MissingNumber(int array[], int n) {
        int xor=array[0];
       for(int i=1;i<n-1;i++){
           xor=xor^array[i];
       }
       int xor1=1;
       for(int j=2;j<n+1;j++){
           xor1=xor1^j;
       }
       int k = xor1^xor;
       return k;
    }
}

GFG APPROACH--------------
class Solution {
    int MissingNumber(int array[], int n) {
        int xor_array = 0, xor_n = 0;

        // xor of all array elements
        for (int i = 0; i < n - 1; i++) xor_array = xor_array ^ array[i];

        // xor of n natural numbers
        for (int i = 1; i <= n; i++) xor_n = xor_n ^ i;

        return xor_n ^ xor_array;
    }
}

**********my approach was right *************
===================================================================
INDEX OF EXTTRA ELEMENT
MY APPROACH--------
int k=0;
        for(int i=0;i<n-1;i++){
            for(int j=0;j<n-1;j++){
                if(a[0]!=b[0]){
                    k=;
                }
                if(a[i]!=b[j])
                {
                    k = i;
                }
            }
        }
        return k-1;
GFG APPROACH--------

 public int findExtra(int a[], int b[], int n) {
        int index = n-1;  
      
        // left and right are end  
        // points denoting the current range. 
        int left = 0, right = n - 2; 
        while (left <= right) 
        { 
            int mid = (left+right) / 2; 
      
            // If middle element is same  
            // of both arrays, it means  
            // that extra element is after  
            // mid so we update left to mid+1 
            if (b[mid] == a[mid]) 
                left = mid + 1; 
      
            // If middle element is different 
            // of the arrays, it means that  
            // the index we are searching for 
            // is either mid, or before mid.  
            // Hence we update right to mid-1. 
            else
            { 
                index = mid; 
                right = mid - 1; 
            } 
        } 
      
        // when right is greater than  
        // left, our search is complete. 
        return index; 
       ======================================================

      TRANSITION ELEMENT
      MY APPROACH--------
      class GfG {
    int transitionPoint(int arr[], int n) {
        int i;
        for(i=0;i<n;i++){
            if(arr[i]==1){
                break;
            }
            if(arr[n-1]==0){
              return -1;  
            }
          
        }
        return i;
    }
}

GFG APPROACH--------------
class GfG {
    int transitionPoint(int arr[], int n) {
        if (arr[0] == 1) {
            return 0;
        }
        // Initialise lower and upper bounnds
        int lb = 0, ub = n - 1;

        // Perform Binary search
        while (lb <= ub) {
            // Find mid
            int mid = (lb + ub) / 2;

            // update lower_bound if mid contains 0
            if (arr[mid] == 0) lb = mid + 1;

            // If mid contains 1
            else if (arr[mid] == 1) {
                // Check if it is the left most 1
                // Return mid, if yes
                if (arr[mid - 1] == 0) return mid;

                // Else update upper_bound
                ub = mid - 1;
            }
        }
        return -1;
    }
}
*************my approach is right***********
========================================================
FLOOR OF SORTED ARRAY 
MY APPPROACH----------
static int findFloor(long arr[], int left, int right, long x)
    {   int mid;
    int res=-1;
        while(left<=right){
            mid=(left+(right-left)/2);
            if(arr[mid]==x)
            return mid;
            else if(arr[mid]<x){
                res=mid;
                left =mid+1;
            }
            else 
            right=mid-1;
        }
        
       
        return res;
    }
    ***********my approach was correct****************

GFG APPROACH---------
// this is just like binary search
    static int findFloor(long arr[], int low, int high, long x)
    {
        // If low and high cross each other 
        if (low > high) 
            return -1; 
  
        // If last element is smaller than x 
        if (x >= arr[high]) 
            return high; 
  
        // Find the middle point 
        int mid = (low+high)/2; 
  
        // If middle point is floor. 
        if (arr[mid] == x) 
            return mid; 
  
        // If x lies between mid-1 and mid 
        if (mid > 0 && arr[mid-1] <= x && x < 
                                    arr[mid]) 
            return mid-1; 
  
        // If x is smaller than mid, floor 
        // must be in left half. 
        if (x < arr[mid]) 
            return findFloor(arr, low,  
                               mid - 1, x); 
  
        // If mid-1 is not floor and x is 
        // greater than arr[mid], 
        return findFloor(arr, mid + 1, high, 
                                         x); 
    }
    
}
===========================================================================
PEAK ELEMENT
MY APPROACH-------
int low =0; 
       int high = n-1;
       
       while(low<=high){
         int mid = (low+(high-low)/2);
           if(mid>0 && mid<n-1){
               if(a[mid]>a[mid+1] && a[mid]>a[mid-1])
               return mid;
               else if(a[mid-1]>a[mid])
               high=mid-1;
               else
               low=mid+1;
           }
           else if(mid==0){
               if(a[0]<a[1])
               return 1;
               else 
               return 0;
           }
           else if(mid==n-1){
               if(a[mid-1]>a[mid-2])
               return mid-1;
               else 
               return mid-2;
           }
       }

       GFG approach--------
       static int findPeakUtil( 
        int arr[], int low, int high, int n) 
    { 
        // Find index of middle element 
        // (low + high)/2 
        int mid = low + (high - low) / 2; 
  
        // Compare middle element with its 
        // neighbours (if neighbours exist) 
        if ((mid == 0 || arr[mid - 1] <= arr[mid]) 
            && (mid == n - 1 || arr[mid + 1] <= arr[mid])) 
            return mid; 
  
        // If middle element is not peak 
        // and its left neighbor is 
        // greater than it, then left half 
        // must have a peak element 
        else if (mid > 0 && arr[mid - 1] > arr[mid]) 
            return findPeakUtil(arr, low, (mid - 1), n); 
  
        // If middle element is not peak 
        // and its right neighbor 
        // is greater than it, then right 
        // half must have a peak 
        // element 
        else
            return findPeakUtil( 
                arr, (mid + 1), high, n); 
    } 
  
    // A wrapper over recursive function 
    // findPeakUtil() 
    static int findPeak(int arr[], int n) 
    { 
        return findPeakUtil(arr, 0, n - 1, n); 
    } 
    ================================================================== 