CONVERT TO ROMAN
==============================================
GFG APPPROACH--------
String m[] = {"", "M", "MM", "MMM"}; 
        String c[] = {"", "C", "CC", "CCC", "CD", "D",  
                            "DC", "DCC", "DCCC", "CM"}; 
        String x[] = {"", "X", "XX", "XXX", "XL", "L",  
                            "LX", "LXX", "LXXX", "XC"}; 
        String i[] = {"", "I", "II", "III", "IV", "V",  
                            "VI", "VII", "VIII", "IX"}; 
              
        // Converting to roman 
        String thousands = m[num/1000]; 
        String hundereds = c[(num%1000)/100]; 
        String tens = x[(num%100)/10]; 
        String ones = i[num%10]; 
              
        String ans = thousands + hundereds + tens + ones; 
              
        return ans; 
=====================================================   
NEEDLE IN HAYSTACK (TWO POINTER)
GFG APPROACH 
class Sol
{
    public static int NeedleinHaystack(String haystack, String needle) 
    {
        int n=haystack.length();
        int m=needle.length();
        for(int i=0;i<=n-m;i++){
            int j;
            for(j=0;j<m;j++){
                if(haystack.charAt(i+j)!=needle.charAt(j))
                break;
            }
            if(j==m)
            return i;
        }
        return -1;
    }
}
public static int NeedleinHaystack(String haystack, String needle) 
    {
        int flag =0, position =-1;
    
        // if needle is empty return 0
        if(needle.length() == 0)
            return 0;
    
        // iterate character by character through the haystack
        for(int i=0, j=0; i< haystack.length(); i++)
        {
            // If character in needle and haystack match
            if(haystack.charAt(i) == needle.charAt(j))
            {
                // If characters match for the first time update position
                if (flag ==0)
                    position =i;
                flag =1;
                j++;
    
            }
            // If character in needle and haystack dont match 
            // and they have been matching up till now
            else if( flag==1)
            {
                // reset flag and needle pointer (j) to 0. 
                flag =0;
                j=0;
    
                // reset haystack pointer (i) to position. 
                // ie last time it matched a character in needle. 
                i = position;
            }
    
            // If needle pointer reaches its end and flag is 1 
            if(j== needle.length() && flag ==1 )
                return position;
        }
        return -1;
    }
}
======================================================= 
RUN LENGTH CODING
MY APPROACH-----
class GfG
 {
    String encode(String str)
    {
        int count =1;
        String s="";
        for(int i=0;i<str.length()-1;i++){
            char ch = str.charAt(i);
            if(str.charAt(i)==str.charAt(i+1))
               count++;
            else 
           { s=s+ch+count;
            count=1;}
        }
         
                      
    return s;
    }
  
}
    
one of the test case is failing

Through String builder it's easy to do

StringBuffer s=new StringBuffer();
          int n=str.length();
          int count=1,i=0;
          for(i=0;i<n-1;i++)
          {
              if(str.charAt(i)==str.charAt(i+1))
              {
                  count++;
              }
              else
              {
                  s.append(str.charAt(i));
                  s.append(String.valueOf(count));
                  count=1;
              }
          }
          if(i==n-1)
          {
              s.append(str.charAt(n-1));
              s.append(String.valueOf(count));
          }
          return s.toString();
    }
    
 }
 =======================================================
 REVERSE WORDS 
 GFG APPROACH
 class Solution {
    String reverseWords(String s) {
        String words[]=s.split("\\.");
        String w="";
        for(int i=words.length-1;i>=0;i--){
            w=w+words[i];
             if(i!=0)
                w += '.';
        }
        return w;
    }
}
==========================================================
LONGEST SUBSTRING WITHOUT REPEATING CHARACTERS
GFG APPROACH-----

 int SubsequenceLength(String s) 
    {
        int i=0;
        int j=0;
        int max=0;
        HashSet<Character>hs=new HashSet();
        while(j<s.length()){
            if(!hs.contains(s.charAt(j))){
                hs.add(s.charAt(j));
                j++;
                max=Math.max(hs.size(),max);
            }else{
                hs.remove(s.charAt(i));
                i++;
            }
        }
        return max;
    }
    
}
===============================================================
COMPARE VERSION NO
MY APPROACH 
class Sol
{
    public static int VersionCompare(String v1, String v2) 
    {  int i=0;
       int j=0;
        while(i<v1.length()|| j<v2.length()){
           if(v1.charAt(i)>v2.charAt(j))
           return 1;
           else if(v1.charAt(i)<v2.charAt(j))
           return -1;
           i++;
           j++;
        }
        return 0;
    }
}
my approach passes some of the testcases 

GFG APPROACH 
public static int VersionCompare(String v1, String v2) 
    {
       String[] s1=v1.split("\\.");
       String[] s2=v2.split("\\.");
       int max = Math.max(s1.length,s2.length);
       for(int i =0;i<max;i++){
        int a1=i<s1.length?Integer.parseInt(s1[i]):0;
        int a2=i<s2.length?Integer.parseInt(s2[i]):0;
        if(a1>a2)
        return 1;
        else if(a1<a2)
        return -1;
       }
       return 0;
    }
    ===========================================


