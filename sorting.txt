MERGE SORT 
======================================
MY APPROACH

int[] a = new int [arr.length];
         int k=0;
         int z=m+1;
         while(l<=m && z<=r){
            if(arr[l]<=arr[z]){
                a[k]=arr[l];
                l++;
            }
            else{
                a[k]=arr[z];
                 z++;
            }
            k++;
         }
         if(l>m){
             while(z<=r){
                 a[k]=arr[z];
                 z++;
                 k++;
             }
         }
         else{
             while(l<=m){
                 a[k]=arr[l];
                 l++;
                 k++;
         }
         for(k=l;k<=r;k++){
             arr[k]=a[k];
         }
         
    }
    }
********my approach was also correcr***********8

 GFG APPROACH-------
 void merge(int arr[], int l, int m, int r)
    {
         int temp[] = new int[r - l + 1];

	// crawlers for both intervals and for temp
	int i = l, j = m+1, k = 0;

	// traverse both arrays and in each iteration add smaller of both elements in temp 
	while(i <= m && j <= r) {
		if(arr[i] <= arr[j]) {
			temp[k] = arr[i];
			k += 1; i += 1;
		}
		else {
			temp[k] = arr[j];
			k += 1; j += 1;
		}
	}

	// add elements left in the first interval 
	while(i <= m) {
		temp[k] = arr[i];
		k += 1; i += 1;
	}

	// add elements left in the second interval 
	while(j <= r) {
		temp[k] = arr[j];
		k += 1; j += 1;
	}

	// copy temp to original interval
	for(i = l; i <= r; i += 1) {
		arr[i] = temp[i - l];
	}
}
}
=========================================================
TRIPLET SUM IS ZERO/TRIPLET SUM
MY APPROACH----------------
lic boolean findTriplets(int arr[] , int n)
    {   Arrays.sort(arr);
        for(int i=0;i<n-2;i++){
            int l=i+1;
            int r=n-1;
            int x=arr[i];
            while(l<r){
                if(x+arr[l]+arr[r]==0)
                  {
                      l++;
                      r--;
                      return true;
                  }
                  else if(x+arr[l]+arr[r]>0){
                      r--;
                  }
                  else 
                  l++;
            }
        }
        
        return false;
    }
}
=========================================================

SEGREGATE 0,1,2 iIN ARRAYS
blic static void segragate012(int arr[], int N){
        int low=0;
        int mid=0;
        int high=N-1;
        while(mid<=high){
            switch(arr[mid]){
                case 0:
                    if(arr[low]!=arr[mid]){
                        int temp=arr[low];
                        arr[low]=arr[mid];
                        arr[mid]=temp;
                    }
                    low++;
                        mid++;
                        break;
                case 1:
                    mid++;
                    break;
                case 2:
                    if(arr[mid]!=arr[high])
                    {
                        int temp=arr[mid];
                        arr[mid]=arr[high];
                        arr[high]=temp;
                    }
                    high--;
            }
            }
        }
    
    
}
===================================================================
